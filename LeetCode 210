 if(numCourses <= 0)
            return new int[]{};
        int[] res = new int[numCourses];
        for(int i = 0; i < numCourses; i++)
            res[i] = i;
            
        if(prerequisites == null || prerequisites.length == 0)
            return res;
        
        int[] inDegree = new int[numCourses];
        for(int[] edge : prerequisites)
            inDegree[edge[0]]++;
        
        Queue<Integer> queue = new LinkedList<>();
        for(int i = 0; i < numCourses; i++)         // calculate inDegree
            if(inDegree[i] == 0)
                queue.offer(i);
        
        int index = 0;
        while(!queue.isEmpty()) {
            int source = queue.poll();
            res[index++] = source;              // reverse post order
            for(int[] edge : prerequisites) {
                if(edge[1] == source) {
                    inDegree[edge[0]]--;
                    if(inDegree[edge[0]] == 0)
                        queue.offer(edge[0]);
                }
            }
        }
        
        if(index == numCourses) {             //looped through all vertex
            return res;
        } else
            return new int[]{};     // has cycle, not DAG
