public TreeNode sortedListToBST(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        
        ListNode pre = head;
        
        if (head == null) {
            return null;
        }
        
        TreeNode root = null;
        if (head.next == null) {
            root = new TreeNode(head.val);
            
            return root;
        }
        
        // get the middle node.
        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            
            // record the node before the SLOW.
            pre = slow;
            slow = slow.next;
        }
        
        // cut the list to two parts.
        pre.next = null;
        TreeNode left = sortedListToBST(head);
        TreeNode right = sortedListToBST(slow.next);
        
        root = new TreeNode(slow.val);
        root.left = left;
        root.right = right;
        
        return root;
    }
